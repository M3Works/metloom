# Configuration for unit testing
# Built from example here https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python
name: Testing and Coverage

on:
  pull_request:
    branches: [ main, integration ]
    paths-ignore:
        - '**.md'
        - '**.rst'
  push:

jobs:
    flake8:
        runs-on: ubuntu-latest
        steps:
            -   uses: actions/checkout@v2

            -   name: Set up Python
                uses: actions/setup-python@v2
                with:
                    python-version: '3.7'

            -   name: Install dependencies
                run: |
                    python3 -m pip install --upgrade pip
                    python3 -m pip install flake8
            -   name: Lint with flake8
                run: |
                    # stop the build if there are Python syntax errors or undefined names
                    flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
                    # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
                    flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    test:
        needs: [flake8, coverage]
        runs-on: ubuntu-latest
        strategy:
          matrix:
            python-version: [3.7, 3.8, 3.9]

        steps:
          - uses: actions/checkout@v2
          - name: Set up Python ${{ matrix.python-version }}
            uses: actions/setup-python@v2
            with:
              python-version: ${{ matrix.python-version }}
          - name: Install dependencies
            run: |
                python3 -m pip install -r requirements.txt
                python3 -m setup.py install
          - name: Test with pytest
            run: |
              pytest --cov=dataloom --cov-fail-under=80
          - if: ${{ matrix.python-version == '3.9' }}
            name: Coverage
            run: |
                coverage report -m
                coverage-badge > coverage.svg
                echo "BRANCH=$(echo ${BRANCH_NAME})" >> $GITHUB_ENV
          - if: ${{ matrix.python-version == '3.9' }}
            name: Archive code coverage results
            uses: actions/upload-artifact@v2
            with:
                name: code-coverage-report-${{ env.BRANCH }}
                path: coverage.svg


